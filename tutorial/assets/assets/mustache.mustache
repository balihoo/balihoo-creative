
<div class="bs-docs-section">
  <h1 id="mustache-assets" class="page-header">Mustache Assets</h1>

  <p class="lead">Mustache templates are used to build your site's HTML content.</p>

  <h3 id="what-is-mustache">What is Mustache?</h3>
  <p><a href="http://mustache.github.io/" target="_parent">Mustache</a> is a very basic language for creating logic-less templates. It uses a very simple tagging syntax that allows you to construct dynamic content. The dynamic nature of the content is driven based on the data <a href="#context">context</a> that used to render the template. We'll discuss the data later on in <a href="../sampledata">Sample Data</a>. If you are completely unfumaliar with templating using Mustache please read the <a href="http://mustache.github.io/mustache.5.html" target="_parent">documentation</a>.</p>

  <h3 id="example-mustache-template">Example Template</h3>
  <p>The following sample Mustache template comes from this tutorial, it is part of the main.mustache template:</p>
  {{> example}}

{{=<% %>=}}
  <h3 id="partials">{{> partials}}</h3>
  <p>The first use of Mustache in the previous example is <code>{{> navbar}}</code>, this called a partial reference. You'll use partials to break your pages, headers, footers, and other HTML content into separate files. If you look at the example template, you'll see that we are referencing a lot of different partials. The name that you use to refer to the partial depends on the directory that contains your <code>.mustache</code> file.</p>

  <p>All <code>.mustache</code> files that are found at the top level directory can be referred to by their file name minus the extension <code>.mustache</code>. Any <code>.mustache</code> files that are found below the top level assets directory will have their directory structure prepended with each nested directory delimited by a - (dash, not to be confused with the em dash â€” that your Mac might accidentally give you). For example, <em>./assets/navbar.mustache</em> is referred to as <code>{{> navbar}}</code>. <em>./assets/index/install.mustache</em> is referred to as <code>{{> index-install}}</code>.

  <p>Notice how we put the <code>index.mustache</code> page at the top level withing the <em>assets/</em> directory. Then, the sub-pages within that page are organized under the <em>assets/index/</em> sub-directory.</p> Organizing your mustache assets in a simlar way should make your conent easier to maintain and allows you to keep the file names simple while still maintaining uniqueness.</p>

  <h3 id="sections">{{# sections}}</h3>
  <p>In the above template we used <code>{{# request}}...{{/ request}}</code> to declare a section block. If the conext did not include an entry for <em>request</em> then this entire section would be skipped. If <em>request</em> were an array then the block would be repeated for each element. In this case <em>request</em> is an object that contains information about the parsed URL (more on that <a href="../urls/">later</a>). The <em>request</em> object should contain a sub-object named <em>ifpage</em>, which has another sub-object with the name of the page that is currently being rendered. In this example the partial that gets included depends on which page is currently being rendered.</p>
  
  <p>By using the <code>{{# section}}</code> syntax we are able to change the rendered content based on the state of the <a href="#context">context</a>. Mustache also supports inverted <code>{{^sections}}</code> which will render a block if the reference does not exist in the context (or evaluates to <em>false</em>).</p>

  <h3 id="variables">{{variables}}</h3>
  <p>In the above template we get the <em>src</em> for our sidenav script using <code>{{assets.js.sidenav_js}}</code>. We'll discuss the dot notation a little later on. Here, the value for that key is substituted directly into the template. It is important to note that this tag will automatically HTML-escape any html entities that are embedded in the value. So, for example, if the value was "this &amp; that", then Mustache will output "this &amp;amp; that". You should generally not embed HTML tags into your data, but if you need unescaped output then use the triple-mustache tag <code>{{{unformated}}}.</code></p>

<%={{ }}=%>

</div>

