<div class="bs-docs-section">
	<h1 id="creative-config-file" class="page-header">Creative Configuration File</h1>

	<p class="lead">Each project needs a configuration file named <code>.balihoo-creative.json</code> file in its top-level directory.</p>

	<h3 id="format">File Format</h3>
	<p>The configuration file must be valid <a href="http://www.json.org/" target="_parent">JSON</a>. The following is a sample configuration file:</p>
	<div class="highlight"><pre><code class="language-js" data-lang="js">{
  "name": "Sample Project",
  "description": "Sample local site project",
  "channel": "Local Websites",
  "environments": {
    "dev": {
      "creativeFormId": 123,
      "companionFormId": 124,
      "endpoint": 100
    },
    "stage": {
      "creativeFormId": 223,
      "companionFormId": 224,
      "endpoint": 200
    },
    "prod": {
      "creativeFormId": 323,
      "companionFormId": 324,
      "endpoint": 300
    }
  },
  "pages": [
    "index",
    "assets",
    "sampledata",
    "test",
    "config",
    "notfound"
  ],
  "template": "main",
  "port": 8088
}</code></pre></div>

	<p>If <code>balihoo-creative</code> does not find the config file in the current working directory it will error.  To create one, along with other required directories, run the <code>balihoo-creative --new</code></p>

	<p>Your project configuration file <code>.balihoo-creative.json</code> should always be <em>checked into source control</em> alongside your project files. As you add pages and change other options you'll want to track these changes in source control.</p>

	<h3 id="name-description"><code>name</code> &amp; <code>description</code></h3>
	<p>The values you provide for <code>name</code> and <code>description</code> will be used as the form name and description in the Form Builder. <code>name</code> must be unique across all forms in the Form Builder. Maximum allowed characters for <code>name</code> is 50, <code>description</code> is 200. Any characters beyond these defined maximums will be truncated.</p>

	<h3 id="channel"><code>channel</code></h3>
	<p>The channel used in Form Builder to identify different creative delivery methods. This must match the exact string used in Form Builder.</p>

	<h3 id="environments"><code>environments</code></h3>
	<p>A creative will be pushed to each Form Builder environment individually.  Certain identifiers must be retained so that updates to your creative can be applied to the correct place.</p>
	<p>creativeFormId will initially be 0, and will be automatically populated the first time the creative is saved to an environment.  Prior to this, you should manually fill in the companionFormId and endpoint id, as these are required for the initial push to be successful.

	<h3 id="pages"><code>pages</code></h3>
	<p>This is an array of strings that define all of the available pages in your local site. The page <code>index</code> is a special case. You should always include this page in your list of pages. If no page is specified on the URL the app assumes that the request is for the <code>index</code> page.</p>

	<p>Note that <code>"notfound"</code> is another special case; If a page is requested that does not match one of these defined pages then the result will be HTTP 404: Page not found. If the <code>"notfound"</code> page is defined then that page will be rendered on a 404 response. If the <code>"notfound"</code> page is not defined then the system will generate a very basic response that states "Page Not Found". You should <em>always</em> plan to supply your own <code>notfound</code> page in order to keep all generated content on brand.</p>

	<h3 id="template"><code>template</code></h3>
	<p>This attribute tells the system which .mustache template to use as the main entry point. Every request is rendered using the same main entry point. In this case <code>"main"</code> refers to main.mustache. Within your template file you will switch content by rendering different partial template files based on the page that is being rendered. We'll show examples of how to do that shortly.</p>

	<h3 id="port"><code>port</code></h3>
	<p>This indicates the port that your application server will listen on. If you are authoring multiple projects simultaneously then you will need to configure different ports for each of them. Otherwise you'll see the following error message when trying to run the second project:</p>
	<div class="highlight"><pre><code class="language-bash" data-lang="bash" style="color:red;">SERVER  Unable to start server on port 8088</code></pre></div>
</div>